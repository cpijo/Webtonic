<Window x:Class="WpfReadDll.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfReadDll"
        mc:Ignorable="d"
        Title="MainWindow" Height="481.2" Width="774">
    <Grid Margin="29,10,26,19">

        <Label Content="DLL Path :" FontSize="14" Height="30" HorizontalAlignment="Right" Margin="0,19,512,0" Name="label1" VerticalAlignment="Top" Width="169" />
        <TextBox Height="25" HorizontalAlignment="Left" Margin="174,19,0,0" Name="txtpath" Text="C:\Users\Sphiwe\Desktop\sbs_test_wpf" VerticalAlignment="Top" Width="352"/>
        <Button BorderBrush="#FF71C8EF" Content="Browse Dll Path" Cursor="Arrow" Height="25" HorizontalAlignment="Right" Margin="0,19,10,0" Name="btnbrowse" VerticalAlignment="Top" Width="140" Background="#FFDDDDDD" Click="Btnbrowse_Click" />

        <Button BorderBrush="#FF71C8EF" Content="Get Dll List" Cursor="Arrow" Height="30" HorizontalAlignment="Left" Margin="174,63,0,0" Name="btnList" VerticalAlignment="Top" Width="168" Click="btnList_Click" Background="#FFE7E8EC" RenderTransformOrigin="0.466,-0.4"></Button>
        <Button BorderBrush="#FF71C8EF" Content="Get Out Dated Dlls" Cursor="Arrow" Height="30" HorizontalAlignment="Left" Margin="358,63,0,0" x:Name="btnOutdatedDlls" VerticalAlignment="Top" Width="168" Click="btnOutdatedDlls_Click" Background="#FFE7E8EC" RenderTransformOrigin="0.466,-0.4"/>

        <DataGrid  Name="myAllDllGrid" HorizontalAlignment="Left" Height="278" Margin="10,126,0,0" VerticalAlignment="Top" Width="332" AutoGenerateColumns="False">

            <DataGrid.Columns>
                <DataGridTextColumn Width="80" Header="Library Name" Binding="{Binding LibraryName}"></DataGridTextColumn>
                <DataGridTextColumn Width="100" Header="Dll Name" Binding="{Binding DllName}"></DataGridTextColumn>
                <DataGridTextColumn Width="80" Header="Dll Version" Binding="{Binding Version}"></DataGridTextColumn>
                <DataGridCheckBoxColumn Width="50" x:Name="chkSelectedServer" Header="Choose"  Binding="{Binding IsChecked , Mode=TwoWay}" IsReadOnly="False" CanUserSort="False" >
                </DataGridCheckBoxColumn>
                <DataGridCheckBoxColumn Binding="{Binding IsChecked, Mode=TwoWay}" IsReadOnly="False">
                    <DataGridCheckBoxColumn.HeaderTemplate>
                        <DataTemplate>
                            <CheckBox Checked="FieldDataGridChecked" Unchecked="FieldDataGridUnchecked" Margin="2" />
                        </DataTemplate>
                    </DataGridCheckBoxColumn.HeaderTemplate>
                </DataGridCheckBoxColumn>

            </DataGrid.Columns>
        </DataGrid>

        <DataGrid  Name="myOutDatedGrid" HorizontalAlignment="Left" Height="278" Margin="357,126,0,0" VerticalAlignment="Top" Width="340" AutoGenerateColumns="False">

            <DataGrid.Columns>
                <DataGridTextColumn Width="100" Header="Library Name" Binding="{Binding LibraryName}"></DataGridTextColumn>
                <DataGridTextColumn Width="120" Header="Reference Dll" Binding="{Binding DllName}"></DataGridTextColumn>
                <DataGridTextColumn Width="100" Header="Outdated Version" Binding="{Binding Version}"></DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>
        <Label Content="List Of Libraries and their dlls" HorizontalAlignment="Left" Margin="10,100,0,0" VerticalAlignment="Top" RenderTransformOrigin="-3.053,-0.038" Width="332"/>
        <Label Content="List Of Libraries and their outdated reference dlls" HorizontalAlignment="Left" Margin="357,99,0,0" VerticalAlignment="Top" RenderTransformOrigin="-3.053,-0.038" Width="323"/>
        <Button BorderBrush="#FF71C8EF" Content="Get Out Dated Dlls" Cursor="Arrow" Height="30" HorizontalAlignment="Left" Margin="561,63,0,0" x:Name="btnDoAsynchronousCalculation" VerticalAlignment="Top" Width="140" Click="btnDoAsynchronousCalculation_Click" Background="#FFE7E8EC" RenderTransformOrigin="0.466,-0.4"/>
    </Grid>
</Window>


@@@@@@@@@@@@@@@@@@@@@@@@@@



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using WpfReadDll.Model;

namespace WpfReadDll
{
    
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {


            //WPF â€“ DataGrid with single click checkbox
            //https://code.4noobz.net/wpf-single-click-datagrid-checkbox/
            InitializeComponent();
        }

        //public static void CheckAllBoxes(DependencyObject obj, bool isChecked)
        //{
        //    for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
        //    {
        //        // If a checkbox, change IsChecked and continue.
        //        if (obj is CheckBox)
        //        {
        //            ((CheckBox)obj).IsChecked = isChecked;
        //            continue;
        //        }

        //        DependencyObject child = VisualTreeHelper.GetChild(obj, i);
        //        CheckAllBoxes(child, isChecked);
        //    }
        //}

        //private DataColumn GetSelectedDll()
        //{
        //    DataColumn dt = null;
        //    for (int i = 0; i < myAllDllGrid.Columns.Count; i++)
        //    {

        //        dt = new DataColumn("Column Name");

        //        dt.DataType = typeof(Boolean);
        //        dt.DefaultValue = false;
        //        dataTable.Add(dt);
        //    }

        //    dataGied.DataContext = dataTable;
        //}

        //    private DataTable GetSelected()
        //{
        //    DataTable dt = new DataTable();
        //    dt.Columns.Add("ServerId");

        //    foreach (DataGridViewRow row in myAllDllGrid.Rows)
        //    {
        //        bool isSelected = Convert.ToBoolean(row.Cells[0].Value);
        //        if (isSelected)
        //        {
        //            dt.Rows.Add(row.Cells[1].Value,);
        //        }
        //    }
        //    return dt;
        //}


        //private void HeadCheck(object sender, RoutedEventArgs e, bool IsChecked)
        //{
        //    foreach (CheckedMusicFile mf in TheMissingChildren)
        //    {
        //        mf.Checked = IsChecked;
        //    }
        //    dgMissingNames.Items.Refresh();
        //}


        public List<InsideLibrary> GetSelectedItems()
        {
            var selectedItems = new List<InsideLibrary>();

            foreach (InsideLibrary item in myAllDllGrid.ItemsSource)
            {

                var look = item.IsChecked;
                bool isSelected = Convert.ToBoolean(look);

                if (isSelected == true)
                {
                    selectedItems.Add(item);
                }
            }
            return selectedItems;
        }


        private void FieldDataGridChecked(object sender, RoutedEventArgs e)
        {
            List<InsideLibrary> selectedItems = new List<InsideLibrary>();
            foreach (InsideLibrary model in myAllDllGrid.ItemsSource)
            {
                //model.IsChecked = true;
                var look = model.IsChecked;
                bool isSelected = Convert.ToBoolean(look);

                if (isSelected == true)
                {
                    selectedItems.Add(model);
                }

            }
        }

        private void FieldDataGridUnchecked(object sender, RoutedEventArgs e)
        {
            List<InsideLibrary> selectedItems = new List<InsideLibrary>();
            foreach (InsideLibrary model in myAllDllGrid.ItemsSource)
            {
                //model.IsChecked = true;
                var look = model.IsChecked;
                bool isSelected = Convert.ToBoolean(look);

                if (isSelected == false)
                {
                    selectedItems.Add(model);
                }

            }
        }

        private void btnOutdatedDlls_Click(object sender, RoutedEventArgs e)
        {
            List<InsideLibrary> selectedItems = new List<InsideLibrary>();
            foreach (InsideLibrary model in myAllDllGrid.ItemsSource)
            {
                //model.IsChecked = true;
                var look = model.IsChecked;
                bool isSelected = Convert.ToBoolean(look);

                //if (isSelected == false)
                //{
                selectedItems.Add(model);
                //}

            }

            myOutDatedGrid.ItemsSource = selectedItems;
           

            var usersGroupedByCountryAndAge = selectedItems.GroupBy(user => user.Version)
                .Select(group => new { dllVersion = group.Key, Count = group.Count() }).ToList();

        }

        private void btnList_Click(object sender, RoutedEventArgs e)
        {

            List<InsideLibrary> selectedItems = new List<InsideLibrary>();

            try
            {
                foreach (InsideLibrary model in myAllDllGrid.ItemsSource)
                {
                    //model.IsChecked = true;
                    var look = model.IsChecked;
                    bool isSelected = Convert.ToBoolean(look);

                    if (isSelected == true)
                    {
                        selectedItems.Add(model);
                    }

                }
            }
            catch (Exception)
            {

                // throw;
            }



            string root = @"C:\Users\Sphiwe\Desktop\sbs_test_wpf";
            root = txtpath.Text;
            if (root == null || root == "")
            {
                System.Windows.Forms.MessageBox.Show("Enter a correct path Directory to load DLLs", "Empty Path Directory",
                                       MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            DirectoryInfo directory = new DirectoryInfo(root);
            DirectoryInfo[] directories = directory.GetDirectories();

            List<AllDlls> allDllList = new List<AllDlls>();

            LibrariesDll LibrariesDll = new LibrariesDll();

            AllDlls allDll = new AllDlls();

            int c = 0;

            c++;
            AllDlls allDlls = new AllDlls();
            Version version = null;
            string _name = null;

            string dirInfo = "C:\\Users\\Sphiwe\\Desktop\\sbs_test_wpf\\commonDll\\commonDll\\bin\\Debug";
            dirInfo = @"C:\Users\Sphiwe\source\repos\GenerateClasses\GenerateClasses\bin\Debug";
            //dirInfo = @"C:\Users\Sphiwe\Documents\SBS_Test\wpf - New\WpfReadDll\WpfReadDll\bin\Debug";

            DirectoryInfo _dllFolder = new DirectoryInfo(dirInfo);
            FileInfo[] AllProjectFiles = _dllFolder.GetFiles("*.dll", SearchOption.AllDirectories);

            Assembly _assembly = null;
            foreach (FileInfo fileInfo in AllProjectFiles)
            {
                try
                {
                    _assembly = Assembly.LoadFile(fileInfo.FullName);// (@"C:\Users\Sphiwe\Desktop\sbs_test_wpf\commonDll\commonDll\bin\Debug\commonDll.dll");

                    _name = _assembly.GetName().Name;
                    version = _assembly.GetName().Version;
                    string[] splitFullName = _assembly.GetName().FullName.ToString().Split(',');
                    string _version = splitFullName[1].Substring(splitFullName[1].IndexOf('=') + 1);

                    string lib = dirInfo.Substring((root.Length + 1));
                    string libraryName = lib.Substring(0, lib.IndexOf('\\'));

                    InsideLibrary insideLibrary = new InsideLibrary();
                    insideLibrary.LibraryName = libraryName;
                    insideLibrary.DllName = _name;
                    insideLibrary.DllPath = fileInfo.FullName;
                    insideLibrary.Version = _version;
                    insideLibrary.Major = version.Major;
                    insideLibrary.Minor = version.Minor;
                    insideLibrary.Build = version.Build;
                    insideLibrary.Revision = version.Revision;
                    allDlls.InsideLibraryList.Add(insideLibrary);
                    allDlls.MyDll.IsMine = false;

                }
                catch (FileLoadException ex)
                {
                    throw;
                }
            }

            myAllDllGrid.ItemsSource = allDlls.InsideLibraryList;

            /*
            SameNameDlls sameNameDlls = new SameNameDlls();

            List<MyDll> OutdatedDll = new List<MyDll>();
            foreach (var myDll in LibrariesDll.MyDllist)
            {
                foreach (AllDlls allmyDll in allDllList)
                {
                    foreach (InsideLibrary lib in allmyDll.InsideLibraryList)
                    {
                        if (myDll.DllName == lib.DllName)
                        {
                            if (myDll.Version == lib.Version)
                            {
                            }
                            else
                            {
                                int result = isGreateOrEqual(myDll.Major, lib.Major);
                                switch (result)
                                {

                                    case 1:
                                        OutdatedDll.Add(lib);
                                        break;
                                    case 0:
                                        result = isGreateOrEqual(myDll.Minor, lib.Minor);
                                        if (result == 1)
                                            OutdatedDll.Add(lib);
                                        else
                                            goto case -1;
                                        break;

                                    case -1:
                                        result = isGreateOrEqual(myDll.Build, lib.Build);
                                        if (result == 1)
                                            OutdatedDll.Add(lib);
                                        break;

                                    default:

                                        break;
                                }
                            }
                        }
                    }
                }
            }

            myOutDatedGrid.ItemsSource = OutdatedDll;

            */

        }




        private int isGreateOrEqual(int libriry, int dll)
        {
            int result = 0;
            if (libriry > dll)
            {
                result = 1;
            }
            else if (libriry == dll)
            {
                result = 0;
            }
            else
            {
                //dll is higher than the library dll whis is abnornmal
                result = -1;
            }
            return result;
        }

        private void Btnbrowse_Click(object sender, RoutedEventArgs e)
        {
            FolderBrowserDialog SelectFolderDlg = new FolderBrowserDialog();
            if (SelectFolderDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                string directorypath = SelectFolderDlg.SelectedPath;
                txtpath.Text = directorypath;
            }
        }


        int gridRowCount = 0;
        BackgroundWorker worker;
        private void btnDoAsynchronousCalculation_Click(object sender, RoutedEventArgs e)
        {
            //pbCalculationProgress.Value = 0;
            myOutDatedGrid.Items.Clear();

            worker = new BackgroundWorker();
            worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_ProgressChanged;
            worker.RunWorkerCompleted += worker_RunWorkerCompleted;
            worker.WorkerReportsProgress = true;
            worker.WorkerSupportsCancellation = true;

            int maxItems = 50;
            //ProgressBar1.Minimum = 1;
            //ProgressBar1.Maximum = 100;

            List<InsideLibrary> selectedItems = new List<InsideLibrary>();
            foreach (InsideLibrary model in myAllDllGrid.ItemsSource)
            {
                selectedItems.Add(model);
            }

            gridRowCount = selectedItems.Count();
            txtpath.Text = "Starting...";
            //worker.RunWorkerAsync(maxItems);
            worker.RunWorkerAsync(selectedItems);
        }



        void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker worker = sender as BackgroundWorker;
            //int? maxItems = e.Argument as int?;
            List<InsideLibrary> maxItems = e.Argument as List<InsideLibrary>;
            // for (int i = 1; i <= maxItems.GetValueOrDefault(); ++i)
            for (int i = 1; i <= maxItems.Count; ++i)
            {
                if (worker.CancellationPending)
                {
                    e.Cancel = true;
                    break;
                }

                Thread.Sleep(100);
                if (i>=100)
                {
                    worker.ReportProgress(100, maxItems[100]);
                }
                worker.ReportProgress(i,maxItems[i]);

                //item added
            }
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            worker.CancelAsync();
        }

        void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Cancelled)
            {
                txtpath.Text = "Cancelled";
            }
            else
            {
                txtpath.Text = "Completed";
            }
            //StartButton.IsEnabled = true;
            //CancelButton.IsEnabled = false;
        }

        
        void worker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //double percent = (e.ProgressPercentage * 100) / 50;
            double percent = (e.ProgressPercentage * 100) / gridRowCount;
            var obj = e.UserState;
            //ProgressBar1.Value = Math.Round(percent, 0);

            myOutDatedGrid.Items.Add(obj);
            txtpath.Text = Math.Round(percent, 0) + "% percent completed";
        }

    }
}






using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using WpfReadDll.Model;

namespace WpfReadDll
{
    
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// </summary>
    public partial class MainWindow_Origin: Window
    {
        public MainWindow_Origin()
        {
            InitializeComponent();
        }

        private void btnList_Click(object sender, RoutedEventArgs e)
        {

            string root = @"C:\Users\Sphiwe\Desktop\sbs_test_wpf";
            root = txtpath.Text;
            if (root == null || root == "")
            {
                System.Windows.Forms.MessageBox.Show("Enter a correct path Directory to load DLLs", "Empty Path Directory",
                                       MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            DirectoryInfo directory = new DirectoryInfo(root);
            DirectoryInfo[] directories = directory.GetDirectories();

            List<AllDlls> allDllList = new List<AllDlls>();

            LibrariesDll LibrariesDll = new LibrariesDll();

            AllDlls allDll = new AllDlls();

            int c = 0;
            foreach (DirectoryInfo _libraries in directories)
            {
                root = _libraries.FullName;

                string[] folders = System.IO.Directory.GetDirectories(root, "*", System.IO.SearchOption.AllDirectories);

                c++;
                AllDlls allDlls = new AllDlls();
                Version version = null;
                string _name = null;

                foreach (string dirInfo in folders)
                {
                    if (dirInfo.Contains(@"\bin\Debug"))
                    {
                        DirectoryInfo _dllFolder = new DirectoryInfo(dirInfo);
                        FileInfo[] AllProjectFiles = _dllFolder.GetFiles("*.dll", SearchOption.AllDirectories);

                        Assembly _assembly = null;
                        foreach (FileInfo fileInfo in AllProjectFiles)
                        {
                            try
                            {
                                _assembly = Assembly.LoadFile(fileInfo.FullName);// (@"C:\Users\Sphiwe\Desktop\sbs_test_wpf\commonDll\commonDll\bin\Debug\commonDll.dll");

                                _name = _assembly.GetName().Name;
                                version = _assembly.GetName().Version;
                                string[] splitFullName = _assembly.GetName().FullName.ToString().Split(',');
                                string _version = splitFullName[1].Substring(splitFullName[1].IndexOf('=') + 1);

                                string lib = dirInfo.Substring((root.Length + 1));
                                string libraryName = lib.Substring(0, lib.IndexOf('\\'));

                                if (libraryName == _name)
                                {
                                    allDlls.MyDll.LibraryName = libraryName;
                                    allDlls.MyDll.DllName = _name;
                                    allDlls.MyDll.DllPath = fileInfo.FullName;
                                    allDlls.MyDll.Version = _version;
                                    allDlls.MyDll.Major = version.Major;
                                    allDlls.MyDll.Minor = version.Minor;
                                    allDlls.MyDll.Build = version.Build;
                                    allDlls.MyDll.Revision = version.Revision;
                                    allDlls.MyDll.IsMine = true;
                                    LibrariesDll.MyDllist.Add(allDlls.MyDll);

                                }
                                else
                                {
                                    InsideLibrary insideLibrary = new InsideLibrary();
                                    insideLibrary.LibraryName = libraryName;
                                    insideLibrary.DllName = _name;
                                    insideLibrary.DllPath = fileInfo.FullName;
                                    insideLibrary.Version = _version;
                                    insideLibrary.Major = version.Major;
                                    insideLibrary.Minor = version.Minor;
                                    insideLibrary.Build = version.Build;
                                    insideLibrary.Revision = version.Revision;
                                    allDlls.InsideLibraryList.Add(insideLibrary);
                                    allDlls.MyDll.IsMine = false;
                                }
                            }
                            catch (FileLoadException ex)
                            {
                                throw;
                            }


                        }
                    }
                }

                if (allDlls.MyDll.DllName == null)
                    continue;

                allDllList.Add(allDlls);

            }

            SameNameDlls sameNameDlls = new SameNameDlls();
            List<SameNameDlls> sameNameDllsList = new List<SameNameDlls>();

            myOutlierGrid.ItemsSource = LibrariesDll.MyDllist;

            List<MyDll> OutdatedDll = new List<MyDll>();
            foreach (var myDll in LibrariesDll.MyDllist)
            {
                foreach (AllDlls allmyDll in allDllList)
                {
                    foreach (InsideLibrary lib in allmyDll.InsideLibraryList)
                    {
                        if (myDll.DllName == lib.DllName)
                        {
                            if (myDll.Version == lib.Version)
                            {
                            }
                            else
                            {
                                int result = isGreateOrEqual(myDll.Major , lib.Major);
                                switch (result)
                                {

                                    case 1:
                                        OutdatedDll.Add(lib);
                                        break;
                                    case 0:
                                        result = isGreateOrEqual(myDll.Minor, lib.Minor);
                                        if (result==1)
                                            OutdatedDll.Add(lib);
                                        else
                                       goto case -1;                                      
                                        break;

                                    case -1:
                                        result = isGreateOrEqual(myDll.Build, lib.Build);
                                        if (result == 1)
                                            OutdatedDll.Add(lib);
                                        break;

                                    default:
                                       
                                        break;
                                }
                            }
                        }
                    }
                }
            }

            myOutDatedGrid.ItemsSource = OutdatedDll;        
        }

        private int isGreateOrEqual(int libriry, int dll)
        {
            int result = 0;
            if (libriry > dll)
            {
                result = 1;
            }
            else if (libriry == dll)
            {
                result = 0;
            }
            else
            {
                //dll is higher than the library dll whis is abnornmal
                result = -1;
            }
            return result;
        }

        private void Btnbrowse_Click(object sender, RoutedEventArgs e)
        {
            FolderBrowserDialog SelectFolderDlg = new FolderBrowserDialog();
            if (SelectFolderDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                string directorypath = SelectFolderDlg.SelectedPath;
                txtpath.Text = directorypath;
            }
        }
    }
}




namespace WpfReadDll.Model
{
    public class AllDlls
    {
        public MyDll MyDll { get; set; }
        public List<InsideLibrary> InsideLibraryList { get; set; }
        public List<MyDll> MyDllList { get; set; }

        public AllDlls()
        {
            MyDll = new MyDll();
            InsideLibraryList = new List<InsideLibrary>();
            MyDllList = new List<MyDll>();
        }
    }

 public class MyDll
    {
        public string LibraryName { get; set; }
        public string DllName { get; set; }
        public string DllPath { get; set; }
        public string Version { get; set; }
        public int Major { get; set; }
        public int Minor { get; set; }
        public int Build { get; set; }
        public int Revision { get; set; }
        public bool IsMine { get; set; }
        public bool IsChecked { get; set; }
    }

    public class InsideLibrary : MyDll
    {
    }

    public class InsideLibrary : NotOursMyDll
    {
    }

    public class InsideLibrary : OurDll
    {
    }
}






